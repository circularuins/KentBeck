【１章】
・実施項目を思い出し、集中力を保ち、完了時がわかるようにするためにToDoリストを作成する
　　項目が完了したらチェック
　　別のテスト作成を思いついたらリストに追加
・Objectではなく、テストから始めよう
　　どんなテストが必要か？
・テストを考える
　　操作用の完全なインターフェースをイメージする
　　外部からの操作の見え方についてストーリーを考える
　　考えられる最善のAPIから始める
・まずはテスト書いてみる
　　当然コンパイルは通らない
　　例：エラー
　　　Dollarクラスがない
　　　timesメソッドがない
　　これらのエラーを、ひとつずつ実装することによって消していく
・テストのコンパイル通った
　　テスト実行→当然赤
　　プログラミング上の問題が以下のように変化
　　　「複数通貨が必要だ」→「このテストを動作させ、残りのテストも動作させることが必要だ」
・テストを（むりやり）通す
　　get_amount関数で固定値=10を返す
・重複を取り除くことで、コードを一般化する
　　本番コード内での重複
　　テストコードと本番コードの重複
・テストに合格する
・ToDoリストにチェックを入れる


【２章】
・一般的なTDDのサイクル
　　１，操作のストーリーを考え、インターフェイスを考えて、テストを作成する
　　２，テストをパスさせる。とにかく早く緑（成功）にすることが最優先
　　　　"明確でシンプルな解決策が明らかに存在する"なら、それをコードにする
　　　　"明確でシンプルな解決策が明らかに存在するが時間を要する"場合は、それをメモして、とにかく緑にする作業を優先する
　　３，コードの重複を除き、一般化する
　　　　緑の状態は保つ
・目標は、動作するきれいなコードである
・素早く緑にするための戦略
　　仮実装　―　定数を返し、本物のコードを得るまで、定数を変数で徐々に置き換える
　　明白な実装　―　実際の実装を記述する
　　三角測量　―　スタブ実装
　通常、上の２つのモード間を推移する
　やるべきことがわかっている場合は明白な実装を続け（テストは随時実行する）、予想外の赤に遭遇すると後戻りし、仮実装へ移行し、正しいコードへリファクタリングし、明白な実装へ戻る
・感情（副作用への不快感など）をテスト（おなじインスタンスに乗算を複数行う）にすることが、TDDに共通するテーマ
・慣れてくれば、美学的判断をテストにすることができる
